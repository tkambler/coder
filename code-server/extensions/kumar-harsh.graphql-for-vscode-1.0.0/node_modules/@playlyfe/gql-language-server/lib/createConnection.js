"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createConnection;
exports.CONNECTION_METHOD = void 0;

var _vscodeLanguageserver = require("vscode-languageserver");

var _vscodeJsonrpc = require("vscode-jsonrpc");

var _net = _interopRequireDefault(require("net"));

var _stream = _interopRequireDefault(require("stream"));

const CONNECTION_METHOD = Object.freeze({
  socket: 'socket',
  stdio: 'stdio',
  nodeIpc: 'node-ipc'
});
exports.CONNECTION_METHOD = CONNECTION_METHOD;

function createConnection(options) {
  switch (options.method) {
    case 'socket':
      {
        // For socket connection, the message connection needs to be
        // established before the server socket starts listening.
        // Do that, and return at the end of this block.
        const writer = new _stream.default.PassThrough();
        const reader = new _stream.default.PassThrough();

        const server = _net.default.createServer(socket => {
          server.close();
          socket.pipe(writer);
          reader.pipe(socket);
        }).listen(options.port);

        return (0, _vscodeLanguageserver.createConnection)(reader, writer);
      }

    case 'stdio':
      {
        const reader = process.stdin;
        const writer = process.stdout;
        return (0, _vscodeLanguageserver.createConnection)(reader, writer);
      }

    case 'node-ipc':
    default:
      {
        const reader = new _vscodeJsonrpc.IPCMessageReader(process);
        const writer = new _vscodeJsonrpc.IPCMessageWriter(process);
        return (0, _vscodeLanguageserver.createConnection)(reader, writer);
      }
  }
}