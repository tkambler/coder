"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Emitter = _interopRequireDefault(require("../Emitter"));

var _types = require("./types");

class GQLV2ToV3Service {
  constructor(Service, options) {
    this._gqlV2 = void 0;
    this._GQLV2Service = void 0;
    this._options = void 0;
    this._emitter = new _Emitter.default();
    this._isRunning = false;

    this._triggerError = err => this._emitter.emit('error', err);

    this._triggerChange = () => this._emitter.emit('change');

    this._catchThrownErrors = (fn, defaultValue) => {
      try {
        return fn();
      } catch (err) {
        this._triggerError(err);

        return defaultValue;
      }
    };

    this._options = options;
    this._GQLV2Service = Service;
  }

  async start() {
    await new Promise(resolve => {
      this._gqlV2 = new this._GQLV2Service({
        onInit: () => {
          this._isRunning = true;
          resolve();
        },
        onChange: this._triggerChange
      });
    });
  }

  async stop() {
    this._isRunning = false;
    await Promise.resolve();
  }

  onChange(listener) {
    const disposable = this._emitter.on('change', listener);

    return {
      remove: () => disposable.dispose()
    };
  }

  onError(listener) {
    const disposable = this._emitter.on('error', listener);

    return {
      remove: () => disposable.dispose()
    };
  }

  onLog() {
    return {
      // eslint-disable-next-line no-empty-function
      remove: () => {}
    };
  }

  getConfig() {
    return this._gqlV2._config;
  }

  getSchema() {
    return this._gqlV2._schemaBuilder.getSchema();
  }

  status() {
    if (!this._isRunning) {
      return [];
    }

    return this._catchThrownErrors(() => {
      return this._gqlV2.status();
    }, []);
  }

  autocomplete(params) {
    if (!this._isRunning) {
      return [];
    }

    return this._catchThrownErrors(() => {
      return this._gqlV2.autocomplete(params);
    }, []);
  }

  getDef(params) {
    if (!this._isRunning) {
      return [];
    }

    return this._catchThrownErrors(() => {
      return [this._gqlV2.getDef(params)].filter(Boolean);
    }, []);
  }

  findRefs(params) {
    if (!this._isRunning) {
      return [];
    }

    return this._catchThrownErrors(() => {
      return this._gqlV2.findRefs(params);
    }, []);
  }

  getInfo(params) {
    if (!this._isRunning) {
      return [];
    }

    return this._catchThrownErrors(() => {
      return [this._gqlV2.getInfo(params)].filter(Boolean);
    }, []);
  }

}

exports.default = GQLV2ToV3Service;