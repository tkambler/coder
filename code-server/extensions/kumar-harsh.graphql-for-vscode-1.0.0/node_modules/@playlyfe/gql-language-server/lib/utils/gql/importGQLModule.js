"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = importGQLModule;
exports.GQL_MODULE_NAME = void 0;

var _importFrom = _interopRequireDefault(require("import-from"));

var _PackageDownloader = _interopRequireDefault(require("./PackageDownloader"));

var _gqlConfig = require("./gqlConfig");

const GQL_MODULE_NAME = '@playlyfe/gql';
exports.GQL_MODULE_NAME = GQL_MODULE_NAME;

async function importGQLModule({
  gqlPath,
  configDir,
  autoDownload,
  logger
}) {
  try {
    // try to load package from cwd
    const mod = (0, _importFrom.default)(gqlPath, GQL_MODULE_NAME);
    return {
      path: gqlPath,
      module: mod
    };
  } catch (err) {
    logger.info(`${GQL_MODULE_NAME} not found in path ${gqlPath}`);

    if (autoDownload) {
      logger.info(`(autoDownloadGQL: true) Trying to download ${GQL_MODULE_NAME}...`);
      logger.info(`Getting ${GQL_MODULE_NAME} version from .gqlConfig...`);
      const gqlConfig = (0, _gqlConfig.getGQLConfig)(configDir);
      const {
        version
      } = gqlConfig;

      if (!version) {
        logger.error(`No valid version of ${GQL_MODULE_NAME} found in .gqlconfig` + ' (Please specify a valid package version in .gqlconfig to auto download package.)');
        throw err;
      }

      logger.info(`${GQL_MODULE_NAME} version ${version} found in .gqlconfig.`);
      const pkgPath = await new _PackageDownloader.default({
        logger
      }).getPackage({
        name: GQL_MODULE_NAME,
        version
      });
      const mod = (0, _importFrom.default)(pkgPath, GQL_MODULE_NAME);
      return {
        module: mod,
        path: pkgPath
      };
    }

    logger.info(`Skipping auto download ${GQL_MODULE_NAME} (autoDownloadGQL: false).`);
    throw err;
  }
}