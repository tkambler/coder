"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = loadGQLService;

var _importGQLModule = _interopRequireWildcard(require("./importGQLModule"));

var _gqlModule = require("./gqlModule");

var _log4js = require("log4js");

const logger = (0, _log4js.getLogger)('load-gql-service');

async function loadGQLService(options) {
  logger.info(`loading ${_importGQLModule.GQL_MODULE_NAME}...`);
  const moduleInfo = await (0, _importGQLModule.default)({
    gqlPath: options.gqlPath,
    configDir: options.configDir,
    autoDownload: options.autoDownloadGQL,
    logger
  });
  logger.info(`using ${_importGQLModule.GQL_MODULE_NAME} from path ${moduleInfo.path}`);
  const gqlModule = moduleInfo.module;

  if ((0, _gqlModule.isV2Module)(gqlModule)) {
    if (options.watchman === false) {
      logger.warn(`${_importGQLModule.GQL_MODULE_NAME} v2.x doesnt support disabling watchman.` + ' Upgrade to v3 if you dont want to use watchman.');
    }

    return (0, _gqlModule.createGQLServiceFromV2Module)(gqlModule, {
      cwd: options.configDir,
      debug: options.debug
    });
  }

  if ((0, _gqlModule.isV3Module)(gqlModule)) {
    return (0, _gqlModule.createGQLServiceFromV3Module)(gqlModule, {
      configDir: options.configDir,
      watchman: options.watchman
    });
  }

  logger.error(`${_importGQLModule.GQL_MODULE_NAME} v${gqlModule.version} is not supported. Currently we support v2.x and v3.x.`);
  return Promise.reject(new Error('Failed to load gql-service'));
}