"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.gqlPositionToLSPPosition = gqlPositionToLSPPosition;
exports.lspPositionToGQLPosition = lspPositionToGQLPosition;
exports.gqlLocationToLSPLocation = gqlLocationToLSPLocation;
exports.filePathToURI = filePathToURI;
exports.uriToFilePath = uriToFilePath;
exports.compareLspPosition = compareLspPosition;
exports.compareLspRange = compareLspRange;
exports.gqlErrorSeverityToDiagnosticSeverity = gqlErrorSeverityToDiagnosticSeverity;

var _vscodeLanguageserver = require("vscode-languageserver");

var _vscodeUri = require("vscode-uri");

function gqlPositionToLSPPosition(gqlPosition) {
  return {
    line: gqlPosition.line - 1,
    character: gqlPosition.column - 1
  };
}

function lspPositionToGQLPosition(lspPosition) {
  return {
    line: lspPosition.line + 1,
    column: lspPosition.character + 1
  };
}

function gqlLocationToLSPLocation(gqlLocation) {
  return {
    uri: filePathToURI(gqlLocation.path),
    range: {
      start: gqlPositionToLSPPosition(gqlLocation.start),
      end: gqlPositionToLSPPosition(gqlLocation.end)
    }
  };
}

function filePathToURI(filePath) {
  return _vscodeUri.URI.file(filePath).toString();
}

function uriToFilePath(uri) {
  return _vscodeUri.URI.parse(uri).fsPath;
}

function compareLspPosition(a, b) {
  return a.line - b.line || a.character - b.character;
}

function compareLspRange(a, b) {
  return compareLspPosition(a.start, b.start) || compareLspPosition(a.end, b.end);
}

function gqlErrorSeverityToDiagnosticSeverity(severity) {
  switch (severity) {
    case 'error':
      return _vscodeLanguageserver.DiagnosticSeverity.Error;

    case 'warn':
      return _vscodeLanguageserver.DiagnosticSeverity.Warning;

    default:
      return _vscodeLanguageserver.DiagnosticSeverity.Hint;
  }
}