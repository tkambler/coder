"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getGQLConfig = getGQLConfig;
exports.findConfigFile = findConfigFile;

var _findConfig = _interopRequireDefault(require("find-config"));

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _json = _interopRequireDefault(require("json5"));

var _path = _interopRequireDefault(require("path"));

const CONFIG_FILE_NAME = '.gqlconfig';

function getGQLConfig(cwd) {
  const configInfo = findConfigFile(cwd);
  const configFile = readConfigFile(configInfo.path);
  return configFile;
}

function findConfigFile(cwd) {
  const result = _findConfig.default.obj(CONFIG_FILE_NAME, {
    cwd
  });

  if (!result) {
    // throw error .gqlConfig not found
    throw new Error(`Could not find a '${CONFIG_FILE_NAME}' file.`);
  }

  return result;
}

findConfigFile.silent = cwd => {
  try {
    return findConfigFile(cwd);
  } catch (err) {
    return null;
  }
};

function readConfigFile(filePath) {
  const fileData = _fsExtra.default.readFileSync(filePath, 'utf8');

  try {
    const configFile = _json.default.parse(fileData);

    return configFile;
  } catch (err) {
    const filename = _path.default.basename(filePath);

    throw new Error(`GQL_CONFIG_FILE_INVALID: Error parsing '${filename}' \n\n${err.message}`);
  }
}