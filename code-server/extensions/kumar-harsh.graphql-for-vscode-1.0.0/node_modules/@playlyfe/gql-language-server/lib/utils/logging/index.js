"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = initializeLogging;
exports.LOG_LEVEL = void 0;

var _log4js = _interopRequireDefault(require("log4js"));

var _path = _interopRequireDefault(require("path"));

const LOG_LEVEL = Object.freeze({
  debug: 'debug',
  info: 'info',
  error: 'error',
  off: 'off'
});
exports.LOG_LEVEL = LOG_LEVEL;

// Configure log4js to not log to console, since
// writing arbitrary data to stdout will break JSON RPC if we're running over
// stdout.
//
// Additionally, add an appender to log over the rpc connection so logging appears
// in the client environment, independent of stdio, node rpc, socket, etc.
function initializeLogging(connection, level) {
  _log4js.default.configure({
    appenders: {
      // connection logger
      _connection: {
        connection,
        type: _path.default.join(__dirname, 'appender-connection.js')
      },
      connection: {
        type: 'logLevelFilter',
        level,
        appender: '_connection'
      }
    },
    categories: {
      default: {
        appenders: ['connection'],
        level
      }
    }
  });

  const logger = _log4js.default.getLogger('gql-language-server');

  process.on('uncaughtException', e => logger.error('uncaughtException', e));
  process.on('unhandledRejection', e => logger.error('unhandledRejection', e)); // don't let anything write to the true stdio as it could break JSON RPC

  global.console.log = connection.console.log.bind(connection.console);
  global.console.error = connection.console.error.bind(connection.console);
}