/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const vscode_languageserver_protocol_1 = require("vscode-languageserver-protocol");
const uuid_1 = require("./utils/uuid");
class ProgressImpl {
    constructor(_connection, title, percentage, message, cancellable) {
        this._connection = _connection;
        this._id = uuid_1.generateUuid();
        let params = {
            id: this._id,
            title,
            cancellable
        };
        if (percentage !== undefined) {
            params.percentage = percentage;
        }
        if (message !== undefined) {
            params.message = message;
        }
        if (cancellable !== undefined) {
            params.cancellable = cancellable;
        }
        ProgressImpl.Instances.set(this._id, this);
        this._source = new vscode_languageserver_protocol_1.CancellationTokenSource();
        this._connection.sendNotification(vscode_languageserver_protocol_1.Proposed.ProgressStartNotification.type, params);
    }
    get token() {
        return this._source.token;
    }
    report(arg0, arg1) {
        let percentage;
        let message;
        if (typeof arg0 === 'number') {
            percentage = arg0;
            if (arg1 !== undefined) {
                message = arg1;
            }
        }
        else {
            message = arg0;
        }
        this._connection.sendNotification(vscode_languageserver_protocol_1.Proposed.ProgressReportNotification.type, { id: this._id, percentage, message });
    }
    done() {
        ProgressImpl.Instances.delete(this._id);
        this._source.dispose();
        this._connection.sendNotification(vscode_languageserver_protocol_1.Proposed.ProgressDoneNotification.type, { id: this._id });
    }
    cancel() {
        this._source.cancel();
    }
}
ProgressImpl.Instances = new Map();
class NullProgress {
    constructor() {
        this._source = new vscode_languageserver_protocol_1.CancellationTokenSource();
    }
    get token() {
        return this._source.token;
    }
    report() {
    }
    done() {
    }
}
exports.ProgressFeature = (Base) => {
    return class extends Base {
        initialize(cap) {
            let capabilities = cap;
            if (capabilities.window && capabilities.window.progress) {
                this._progressSupported = true;
                this.connection.onNotification(vscode_languageserver_protocol_1.Proposed.ProgressCancelNotification.type, (params) => {
                    let progress = ProgressImpl.Instances.get(params.id);
                    if (progress !== undefined) {
                        progress.cancel();
                    }
                });
            }
        }
        createProgress(title, percentage, message, cancellable) {
            if (this._progressSupported) {
                return new ProgressImpl(this.connection, title, percentage, message, cancellable);
            }
            else {
                return new NullProgress();
            }
        }
    };
};
